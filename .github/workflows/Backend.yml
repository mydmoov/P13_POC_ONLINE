# Backend Workflow
# Ce fichier de configuration GitHub Actions permet de définir un workflow pour automatiser les processus
# d'intégration et de déploiement continu (CI/CD) pour le dossier backend de BobApp. Il est déclenché lors de
# pushs sur une branch dev  et de pull requests sur une branch main.

name: Backend Workflow

on:
#   Déclenche le workflow lors d'un push sur la branche "feature/workflow" dans le dossier "back" pour tester pendant le developpement
 push:
   branches:
     - evol/docker-config-for-deploy
     - main
  #  paths:
  #    - 'P13-chat-backend/**'


jobs:
  # Job pour la construction, les tests, le rapport de couverture, et l'analyse SonarCloud
  Build:
    runs-on: ubuntu-latest

    # Définition du répertoire de travail par défaut
    defaults:
      run:
        working-directory: P13-chat-backend

    steps:
      # Étape 1 : Check-out du code source du dépôt
      - name: Checkout code
        uses: actions/checkout@v3
        with:
         fetch-depth: 0

      # Étape 2 : Configuration de Java JDK 17
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'zulu'
          cache: maven

      # Étape 3 : Mise en cache des packages Maven pour accélérer les builds successifs
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

     
  # Job secondaire pour la création et le push de l'image Docker du backend
  DockerLogAndBuild:

    # Utilise également une image Ubuntu
    runs-on: ubuntu-latest

    # Ce job dépend de la complétion du job "Build"
    needs: Build

    # Définition du répertoire de travail par défaut
    defaults:
      run:
        working-directory: ${{ github.workspace }}/P13-chat-backend

    steps:
      # Étape 1 : Check-out du code source pour le job Docker
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2 : Mise en cache des couches Docker pour accélérer les builds successifs
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Étape 3 : Connexion à Docker Hub avec les informations d'authentification stockées dans les secrets
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      # Étape 4 : Construction et push de l'image Docker du backend vers Docker Hub
      - name: Build and push backend Docker image
        run: |
          docker build -t poc-back-online .
          docker tag poc-back-online ${{ secrets.DOCKER_USERNAME }}/poc-back-online:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/poc-back-online:latest