# Frontend Workflow
# Ce fichier de configuration GitHub Actions permet de définir un workflow pour automatiser les processus
# d'intégration et de déploiement continu (CI/CD) pour le dossier frontend de BobApp. Il est déclenché lors de
# pushs sur une branch dev  et de pull requests sur une branch main.

name: Frontend Workflow

on:
  # Déclenche le workflow lors d'un push sur la branche "feature/workflow" dans le dossier "front" pour tester pendant le developpement 
 push:
   branches:
     - evol/docker-config-for-deploy
     - main
  #  paths:
  #    - 'P13-chat-frontend/**'


jobs:
  # Job pour la construction, les tests, le rapport de couverture, et l'analyse SonarCloud
  Build:
    # Utilise l'image Ubuntu la plus récente
    runs-on: ubuntu-latest

    # Définition du répertoire de travail par défaut
    defaults:
      run:
        working-directory: P13-chat-frontend

    # Stratégie de configuration pour différentes versions de Node.js
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # Étape 1 : Check-out du code source du dépôt
      - name: Check-out
        uses: actions/checkout@v3
        with:
         fetch-depth: 0


      # Étape 2 : Configuration de Node.js avec la version spécifiée
      - name: Utilisation de Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          # Cache des dépendances npm basées sur le fichier package.json
          cache-dependency-path: P13-chat-frontend/package.json

      # Étape 3 : Installation des dépendances npm
      - name: Installation des dépendances
        run: npm install

      # Étape 4 : Compilation du projet
      - name: Compilation du projet
        run: npm run build

 

  # Job secondaire pour la création et le push de l'image Docker
  DockerLogAndBuild:
    # Utilise également une image Ubuntu
    runs-on: ubuntu-latest

    # Ce job dépend de la complétion du job "Build"
    needs: Build
    defaults:
      run:
        working-directory: ${{ github.workspace }}/P13-chat-frontend

    steps:
      # Étape 1 : Check-out du code source pour le job Docker
      - name: checkout
        uses: actions/checkout@v4

      # Étape 2 : Mise en cache des couches Docker pour accélérer les builds successifs
      - name: Mise en cache des couches Docker
        uses: actions/cache@v3
        with:
          path: /tmp/.docker-cache
          # Utilisation de l'OS et du hash du Dockerfile pour la clé de cache
          key: ${{ runner.os }}-docker-${{ hashFiles('**/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      # Étape 3 : Connexion à Docker Hub avec les informations d'authentification stockées dans les secrets
      - name: Connexion à Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASS }}

      # Étape 4 : Construction et push de l'image Docker du frontend vers Docker Hub
      - name: Construire et push de l'image Docker du frontend
        run: |
          docker build -t poc-front-online .
          docker tag poc-front-online ${{ secrets.DOCKER_USERNAME }}/poc-front-online:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/poc-front-online:latest